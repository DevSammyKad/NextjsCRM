generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String       @id @unique @default(uuid())
  email          String       @unique
  firstName      String
  lastName       String
  profileImage   String
  role           Role         @default(STUDENT)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Organization {
  id                  String    @id @default(uuid())
  organizationName    String
  organizationPanCard String    @unique
  organizationMail    String    @unique
  organizationType    String
  organizationWebsite String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  district            String    @default("")
  state               String    @default("")
  grades              Grade[]
  students            Student[]
  teams               Team[]
  users               User[]
}

model Lead {
  id        Int        @id @default(autoincrement())
  name      String
  email     String
  phone     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    LeadStatus @default(NEW)
  age       Int
  note      String?
  source    LeadSource @default(FACEBOOK)
}

model Student {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  age                Int
  address            String
  phoneNumber        String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  organizationId     String
  gradeId            Int
  grade              Grade               @relation(fields: [gradeId], references: [id])
  organization       Organization        @relation(fields: [organizationId], references: [id])
  student_attendance StudentAttendance[]

  @@unique([id, organizationId])
}

model Grade {
  id             Int          @id @default(autoincrement())
  grade          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  students       Student[]
}

model StudentAttendance {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId String
  present   Boolean  @default(false)
  day       Int
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, day, month, year])
}

model Team {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now())
  name           String?
  ownerId        String?      @db.Uuid
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    TeamMember[]
}

model TeamMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?
  email     String?  @unique
  role      String?  @default("member")
  status    String?  @default("active")
  createdAt DateTime @default(now())
  teamId    String?  @db.Uuid
  team      Team?    @relation(fields: [teamId], references: [id])
}

model GoogleForm {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  created_at DateTime @default(now()) @db.Timestamptz(6)
  data       String
  email      String?
  age        Int
}

enum LeadStatus {
  NEW
  CONVERTED
  CONTACTED
  FOLLOW_UP
  MISSED
  CLOSED
}

enum LeadSource {
  FACEBOOK
  GOOGLE_ADS
  LINKEDIN
  TWITTER
  INSTAGRAM
  REFERRAL
  WEBSITE
  EMAIL_CAMPAIGN
  EVENTS
  COLD_CALL
}

enum Role {
  STUDENT
  MEMBER
  ADMIN
}
